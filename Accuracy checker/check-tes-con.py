import codecs
import pytesseract
import glob
from PIL import Image
import difflib

pytesseract.pytesseract.tesseract_cmd = 'C:\Program Files\Tesseract-OCR\\tesseract.exe'

#mylist = [f for f in glob.glob("../generate-images-java/Output/*")]
#mylist = [f for f in glob.glob("../generate-images-java/testout/*")]
#mylist = [f for f in glob.glob("images/*")]
mylist = [f for f in glob.glob("../generate-images-java/testing-100-images/*")]

g = codecs.open("tes-con-out-100.txt", "w+", encoding="utf-8")

config = ('-l sin --oem 1 --psm 3')

f = codecs.open("dic.txt", encoding="utf-8")
dic_words = f.read().split()

u = codecs.open("conf_characters.txt", encoding="utf-8-sig")
confusionList = u.read().split()

confusionMatrix =  [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.06666666666666667,0,0,0,0,0,0,0,0,0,0,0.13333333333333333,0,0,0,0,0.6666666666666666,0,0,0.06666666666666667,0,0,0.06666666666666667],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.03571428571428571,0,0.8928571428571429,0,0,0,0,0,0,0,0,0.03571428571428571,0,0,0,0,0,0,0,0,0.03571428571428571],[0,0,0,0,0,0,0,0,0,0.3333333333333333,0,0,0,0,0,0,0.3333333333333333,0,0,0,0,0,0,0.16666666666666666,0,0,0,0,0,0,0,0,0,0.16666666666666666,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0.0023094688221709007,0,0,0,0,0.009237875288683603,0,0.011547344110854504,0,0.009237875288683603,0,0.004618937644341801,0,0.0023094688221709007,0,0,0,0.628175519630485,0.09468822170900693,0.025404157043879907,0.09237875288683603,0.016166281755196306,0.0023094688221709007,0.03926096997690531,0.023094688221709007,0,0.02771362586605081,0.004618937644341801,0,0.006928406466512702],[0,0,0,0,0,0.075,0,0,0,0,0,0,0,0,0.05,0,0,0,0.025,0.125,0,0,0.625,0,0,0,0,0.025,0,0,0.025,0,0,0.025,0,0,0.025],[0,0.0410958904109589,0,0,0,0.1232876712328767,0,0,0,0,0,0,0.0136986301369863,0,0,0,0.2054794520547945,0,0,0,0.0136986301369863,0,0,0,0.0684931506849315,0.0684931506849315,0.0136986301369863,0.0547945205479452,0.1232876712328767,0,0.0136986301369863,0.0547945205479452,0.0136986301369863,0.0821917808219178,0,0,0.1095890410958904],[0,0,0,0,0,0.0028735632183908046,0,0,0,0,0,0,0,0,0,0,0.005747126436781609,0,0.0028735632183908046,0,0,0,0,0,0.031609195402298854,0.06896551724137931,0.0028735632183908046,0.008620689655172414,0,0.0028735632183908046,0.8591954022988506,0.0028735632183908046,0,0,0,0.005747126436781609,0.005747126436781609],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.027777777777777776,0,0,0,0,0,0,0,0.027777777777777776,0,0.027777777777777776,0.4444444444444444,0,0.3055555555555556,0,0,0.05555555555555555,0,0,0,0,0,0.1111111111111111],[0,0,0,0,0,0,0,0.017391304347826087,0,0,0,0.008695652173913044,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.017391304347826087,0,0.02608695652173913,0.008695652173913044,0,0.9217391304347826,0,0,0,0,0],[0,0,0,0,0,0.02830188679245283,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8301886792452831,0,0,0,0.009433962264150943,0.07547169811320754,0.009433962264150943,0.009433962264150943,0,0,0,0,0,0.018867924528301886,0.009433962264150943,0,0.009433962264150943],[0,0,0,0,0,0.09302325581395349,0,0,0,0.023255813953488372,0,0,0,0,0,0,0.06976744186046512,0,0.023255813953488372,0,0.11627906976744186,0,0,0,0.3488372093023256,0,0.09302325581395349,0.13953488372093023,0,0,0,0,0,0.06976744186046512,0.023255813953488372,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.9230769230769231,0,0.07692307692307693,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0.06896551724137931,0,0.06896551724137931,0,0,0,0,0,0,0,0,0,0,0.06896551724137931,0.1724137931034483,0,0,0.034482758620689655,0,0,0.06896551724137931,0.06896551724137931,0.06896551724137931,0,0,0,0,0,0.3793103448275862,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2,0,0.2,0,0,0.2,0,0,0,0,0,0],[0,0,0.3333333333333333,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.3333333333333333,0,0,0,0,0,0,0.3333333333333333,0,0,0,0,0,0,0,0,0,0,0],[0,0,0.0017574692442882249,0,0,0.008787346221441126,0,0,0,0,0,0,0,0,0.0017574692442882249,0,0.005272407732864675,0,0,0,0.0017574692442882249,0,0,0,0.005272407732864675,0.022847100175746926,0.0017574692442882249,0.008787346221441126,0.0017574692442882249,0,0.9226713532513181,0.01054481546572935,0,0.005272407732864675,0.0017574692442882249,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0.07692307692307693,0.07692307692307693,0,0,0,0.07692307692307693,0,0,0,0,0,0,0.15384615384615385,0.6153846153846154,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0.02857142857142857,0,0,0,0,0,0,0.05714285714285714,0,0,0,0.22857142857142856,0,0.11428571428571428,0,0,0,0,0,0.05714285714285714,0.3142857142857143,0.11428571428571428,0.02857142857142857,0,0,0.02857142857142857,0,0,0.02857142857142857,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0.030303030303030304,0,0,0,0,0,0.9393939393939394,0.030303030303030304,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0.1111111111111111,0,0,0,0,0,0,0,0,0,0,0,0,0.05555555555555555,0,0.05555555555555555,0,0,0,0,0.4444444444444444,0.05555555555555555,0,0,0,0.2222222222222222,0,0,0.05555555555555555,0,0,0],[0,0,0,0,0,0.02564102564102564,0,0,0,0,0,0,0,0,0.02564102564102564,0,0,0,0,0,0,0,0,0,0.02564102564102564,0.28205128205128205,0,0.02564102564102564,0.02564102564102564,0,0,0.5897435897435898,0,0,0,0,0],[0,0,0,0,0,0.09824561403508772,0.005263157894736842,0.017543859649122806,0,0.005263157894736842,0,0.0017543859649122807,0.043859649122807015,0,0.005263157894736842,0,0.04736842105263158,0.014035087719298246,0.05964912280701754,0.007017543859649123,0.01929824561403509,0,0.007017543859649123,0.007017543859649123,0,0.20175438596491227,0.043859649122807015,0.10526315789473684,0.02456140350877193,0.0017543859649122807,0.014035087719298246,0.04035087719298246,0,0.1280701754385965,0.0824561403508772,0.014035087719298246,0.005263157894736842],[0,0,0.16158536585365854,0,0,0.10365853658536585,0,0.009146341463414634,0,0.003048780487804878,0,0,0.036585365853658534,0,0.003048780487804878,0,0.01524390243902439,0,0.21646341463414634,0,0.021341463414634148,0,0.003048780487804878,0,0.039634146341463415,0,0.03048780487804878,0.11890243902439024,0.1524390243902439,0.012195121951219513,0.042682926829268296,0,0,0.012195121951219513,0.01524390243902439,0,0.003048780487804878],[0,0,0,0,0,0.05945945945945946,0,0.02702702702702703,0.005405405405405406,0.043243243243243246,0,0,0.021621621621621623,0,0.010810810810810811,0,0.05405405405405406,0.005405405405405406,0.02702702702702703,0,0.02702702702702703,0.032432432432432434,0.02702702702702703,0,0.10810810810810811,0.032432432432432434,0,0.2972972972972973,0,0.005405405405405406,0.12432432432432433,0.032432432432432434,0.005405405405405406,0.05405405405405406,0,0,0],[0,0.005263157894736842,0,0,0,0.042105263157894736,0,0.021052631578947368,0,0.010526315789473684,0,0.005263157894736842,0.11578947368421053,0,0.010526315789473684,0,0.05263157894736842,0.005263157894736842,0.042105263157894736,0.005263157894736842,0.03684210526315789,0,0,0.02631578947368421,0.22105263157894736,0.19473684210526315,0.02631578947368421,0,0.010526315789473684,0.010526315789473684,0.04736842105263158,0.010526315789473684,0,0.05789473684210526,0.03684210526315789,0.005263157894736842,0],[0,0,0,0,0,0.05172413793103448,0,0.1206896551724138,0,0,0,0,0,0,0,0,0.05172413793103448,0,0.017241379310344827,0,0,0,0,0,0.1724137931034483,0.27586206896551724,0,0.017241379310344827,0,0.017241379310344827,0,0,0,0,0.05172413793103448,0.08620689655172414,0.13793103448275862],[0,0,0,0,0,0.05555555555555555,0,0,0,0,0.05555555555555555,0,0,0,0,0,0.05555555555555555,0,0,0,0.05555555555555555,0,0,0,0.05555555555555555,0,0.3333333333333333,0,0,0,0.1111111111111111,0.16666666666666666,0,0,0.1111111111111111,0,0],[0,0,0,0,0,0.03225806451612903,0.03225806451612903,0,0,0,0,0,0,0,0,0,0,0,0.03225806451612903,0,0,0,0,0,0.16129032258064516,0.41935483870967744,0,0.1935483870967742,0,0,0,0,0,0.03225806451612903,0,0,0.0967741935483871],[0,0.022988505747126436,0,0,0,0.08045977011494253,0,0,0,0,0,0,0,0,0.011494252873563218,0,0.10344827586206896,0,0.011494252873563218,0,0,0,0,0.011494252873563218,0,0.5517241379310345,0.011494252873563218,0.022988505747126436,0,0.05747126436781609,0.034482758620689655,0,0,0.011494252873563218,0,0,0.06896551724137931],[0,0,0,0,0,0.3333333333333333,0,0,0,0,0,0,0.3333333333333333,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.3333333333333333,0,0,0,0,0],[0,0.00011235955056179776,0.00011235955056179776,0,0,0.011235955056179775,0.00022471910112359551,0.0017977528089887641,0,0.00011235955056179776,0,0.0005617977528089888,0.0035955056179775282,0,0.00033707865168539324,0,0.9274157303370787,0,0.0005617977528089888,0.00033707865168539324,0.0029213483146067415,0,0.0005617977528089888,0,0.023707865168539326,0.011235955056179775,0.0012359550561797752,0.008314606741573034,0.0012359550561797752,0.0005617977528089888,0.001348314606741573,0.0007865168539325843,0,0,0.0016853932584269663,0,0],[0,0,0,0,0,0.015776699029126214,0,0.0012135922330097086,0.012135922330097087,0.012135922330097087,0,0,0,0,0,0,0.01699029126213592,0,0,0,0.0012135922330097086,0,0.0048543689320388345,0,0.009708737864077669,0.02063106796116505,0.0036407766990291263,0.014563106796116505,0.0036407766990291263,0,0.4441747572815534,0.015776699029126214,0,0.4223300970873786,0,0.0012135922330097086,0],[0,0,0,0,0,0,0,0.006289308176100629,0,0,0,0.006289308176100629,0.006289308176100629,0,0,0,0.012578616352201259,0,0,0,0,0,0,0.012578616352201259,0.03773584905660377,0.031446540880503145,0,0.025157232704402517,0,0,0.8364779874213837,0.018867924528301886,0,0.006289308176100629,0,0,0],[0,0,0,0,0,0.125,0.25,0.06944444444444445,0,0,0,0,0.013888888888888888,0,0.013888888888888888,0,0.06944444444444445,0,0.06944444444444445,0,0.041666666666666664,0,0,0,0.09722222222222222,0.041666666666666664,0.027777777777777776,0.05555555555555555,0.013888888888888888,0,0.05555555555555555,0.027777777777777776,0,0.027777777777777776,0,0,0]]

for i in range(0, len(mylist)):
	print(i)
	text = pytesseract.image_to_string(Image.open(mylist[i]), config=config)
	splited = mylist[i].split("/")
	splited = splited[-1].split(".")
	splited = splited[-2].split("\\")
	correct = (splited[-1])
	
	ocrWord = text
	
	if(ocrWord not in dic_words):
		foundfromconf=False
		for c in range(0,len(ocrWord)):
			newOcrWord =ocrWord
			
			if ocrWord[c] in confusionList:
				indexElement = confusionList.index(ocrWord[c])
				#bestReplaceIndex = confusionMatrix[indexElement]index.(max(confusionMatrix[indexElement]))
				highestElement = max(confusionMatrix[indexElement])
				

				bestReplacementIndex = confusionMatrix[indexElement].index(highestElement)
				
				bestReplacement = confusionList[bestReplacementIndex]
				newOcrWord.replace(newOcrWord[c],bestReplacement)

				checkdicNew = False
				new_checked_word = []
				for l in range(0, len(dic_words)):
					if(newOcrWord == dic_words[l]):
						checkdicNew = True
						break
				if(checkdicNew):
					#new_checked_word = [newOcrWord, "1"]
					text=newOcrWord
					foundfromconf=True
					break
			
				
		
		#if(foundfromconf==False):
			#diffout = difflib.get_close_matches(ocrWord,dic_words)
			#if(len(diffout)!=0):
				#text=diffout[0]
			
	
	g.write(text+"-")
	g.write(correct+"\n")

